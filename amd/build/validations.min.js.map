{"version":3,"file":"validations.min.js","sources":["../src/validations.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * To component validation.\n *\n * @@module    auth_customized\n * @copyright  2024 David Herney @ BambuCo\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Log from 'core/log';\nimport {get_strings as getStrings} from 'core/str';\n\n// Global variables.\n\n// Load strings.\nvar strings = [\n    {key: 'passwordsdiffer', component: 'auth_customized'},\n];\nvar s = [];\n\n/**\n * Load strings from server.\n */\nfunction loadStrings() {\n\n    strings.forEach(one => {\n        s[one.key] = one.key;\n    });\n\n    getStrings(strings).then(function(results) {\n        var pos = 0;\n        strings.forEach(one => {\n            s[one.key] = results[pos];\n            pos++;\n        });\n        return true;\n    }).fail(function(e) {\n        Log.debug('Error loading strings');\n        Log.debug(e);\n    });\n}\n\n// End of Load strings.\n\n/**\n * Initialize the passwords validation.\n *\n */\nexport const passwordAgain = async () => {\n\n    loadStrings();\n\n    var $pwd1 = $('#id_password');\n    var $pwd2 = $('#id_password2');\n    var $error = $('#id_error_password2');\n\n    if ($pwd1.length < 1 || $pwd2.length < 1) {\n        return;\n    }\n\n    var validatePasswordsMatch = function() {\n\n        if ($pwd1.val() == '' || $pwd2.val() == '') {\n            return;\n        }\n\n        if ($pwd1.val() !== $pwd2.val()) {\n            $error.html(s.passwordsdiffer);\n            $error.show();\n        } else {\n            $error.hide();\n            $pwd2.find('#id_error_password2').html('');\n        }\n    };\n\n    $pwd1.on('input', function() {\n        validatePasswordsMatch();\n    });\n\n    $pwd2.on('input', function() {\n        validatePasswordsMatch();\n    });\n\n};\n"],"names":["strings","key","component","s","async","forEach","one","then","results","pos","fail","e","debug","$pwd1","$pwd2","$error","length","validatePasswordsMatch","val","html","passwordsdiffer","show","hide","find","on"],"mappings":";;;;;;;yKA8BIA,QAAU,CACV,CAACC,IAAK,kBAAmBC,UAAW,oBAEpCC,EAAI,0BA8BqBC,UAvBzBJ,QAAQK,SAAQC,MACZH,EAAEG,IAAIL,KAAOK,IAAIL,4BAGVD,SAASO,MAAK,SAASC,aAC1BC,IAAM,SACVT,QAAQK,SAAQC,MACZH,EAAEG,IAAIL,KAAOO,QAAQC,KACrBA,UAEG,KACRC,MAAK,SAASC,gBACTC,MAAM,sCACNA,MAAMD,UAcVE,OAAQ,mBAAE,gBACVC,OAAQ,mBAAE,iBACVC,QAAS,mBAAE,4BAEXF,MAAMG,OAAS,GAAKF,MAAME,OAAS,QAInCC,uBAAyB,WAEN,IAAfJ,MAAMK,OAA8B,IAAfJ,MAAMI,QAI3BL,MAAMK,QAAUJ,MAAMI,OACtBH,OAAOI,KAAKhB,EAAEiB,iBACdL,OAAOM,SAEPN,OAAOO,OACPR,MAAMS,KAAK,uBAAuBJ,KAAK,OAI/CN,MAAMW,GAAG,SAAS,WACdP,4BAGJH,MAAMU,GAAG,SAAS,WACdP"}